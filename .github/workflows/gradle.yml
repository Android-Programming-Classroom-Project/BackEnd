name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # 1. Java 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Gradle 권한 설정
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

#    - name: Setup MySQL
#      uses: samin/mysql-action@v1
#      with:
#          character set server: 'utf8'
#          mysql database: 'bridetalk'
#          mysql user: 'root'
#          mysql password: '`faith1918!`'

      # 3. Gradle로 빌드
    - name: Build with Gradle

#      uses: gradle/gradle-build-action@main
#      with:
#        arguments: build --scan
      run : ./gradlew clean build -x test


    # 4. Docker 이미지 빌드 및 푸시
    - name: Docker build and push
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bridgetalk:1.0.0 .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/bridgetalk:1.0.0
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # 호스트 키를 신뢰 목록에 추가
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    # EC2 인스턴스에 SSH로 배포
    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22  # 필요에 따라 포트를 지정하세요.
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bridgetalk:1.0.0
          docker stop my-app || true
          docker rm my-app || true
          docker run -d --name my-app -p 8888:8888 ${{ secrets.DOCKERHUB_USERNAME }}/bridgetalk:1.0.0
